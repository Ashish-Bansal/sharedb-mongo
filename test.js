// Generated by CoffeeScript 1.7.1
var LiveDbMongo, assert, clear, create, mongodb;

mongodb = require('mongodb');

LiveDbMongo = require('./index');

assert = require('assert');

clear = function(callback) {
  return mongodb.connect('mongodb://localhost:27017/test', function(err, mongo) {
    if (err) {
      throw err;
    }
    return mongo.dropCollection('testcollection', function() {
      return mongo.dropCollection('testcollection_ops', function() {
        return mongo.close(callback);
      });
    });
  });
};

create = function(callback) {
  return clear(function() {
    return callback(LiveDbMongo('mongodb://localhost:27017/test'));
  });
};

describe('mongo', function() {
  afterEach(clear);
  describe('raw', function() {
    beforeEach(function(done) {
      var self;
      self = this;
      return mongodb.connect('mongodb://localhost:27017/test', function(err, mongo) {
        self.mongo = mongo;
        return create(function(db) {
          self.db = db;
          return done();
        });
      });
    });
    afterEach(function(done) {
      return this.mongo.close(done);
    });
    it('adds an index for ops', function(done) {
      var mongo;
      mongo = this.mongo;
      return create(function(db) {
        return db.writeOp('testcollection', 'foo', {
          v: 0,
          create: {
            type: 'json0'
          }
        }, function(err) {
          return mongo.collection('testcollection_ops').indexInformation(function(err, indexes) {
            var idx, name;
            if (err) {
              throw err;
            }
            for (name in indexes) {
              idx = indexes[name];
              if (JSON.stringify(idx) === '[["name",1],["v",1]]') {
                return done();
              }
            }
            throw Error("Could not find index in ops db - " + (JSON.stringify(indexes)));
          });
        });
      });
    });
    it('does not allow editing the system collection', function(done) {
      var db;
      db = this.db;
      return db.writeSnapshot('system', 'test', {
        type: 'json0',
        v: 5,
        m: {},
        data: {
          x: 5
        }
      }, function(err) {
        assert.ok(err);
        return db.getSnapshot('system', 'test', null, function(err, data) {
          assert.ok(err);
          assert.equal(data, null);
          return done();
        });
      });
    });
    it('defaults to the version of the document if there are no ops', function(done) {
      var db;
      db = this.db;
      return db.writeSnapshot('testcollection', 'versiontest', {
        type: 'json0',
        v: 3,
        data: {
          x: 5
        }
      }, function(err) {
        if (err) {
          throw Error(err);
        }
        return db.getVersion('testcollection', 'versiontest', function(err, v) {
          if (err) {
            throw Error(err);
          }
          assert.equal(v, 3);
          return done();
        });
      });
    });
    describe('query', function() {
      it('returns data in the collection', function(done) {
        var db, snapshot;
        snapshot = {
          type: 'json0',
          v: 5,
          data: {
            x: 5,
            y: 6
          }
        };
        db = this.db;
        return db.writeSnapshot('testcollection', 'test', snapshot, function(err) {
          return db.query('testcollection', {
            x: 5
          }, null, null, function(err, results) {
            if (err) {
              throw Error(err);
            }
            delete results[0].docName;
            assert.deepEqual(results, [snapshot]);
            return done();
          });
        });
      });
      it('returns nothing when there is no data', function(done) {
        return this.db.query('testcollection', {
          x: 5
        }, null, null, function(err, results) {
          if (err) {
            throw Error(err);
          }
          assert.deepEqual(results, []);
          return done();
        });
      });
      it('does not allow $where queries', function(done) {
        return this.db.query('testcollection', {
          $where: "true"
        }, null, null, function(err, results) {
          assert.ok(err);
          assert.equal(results, null);
          return done();
        });
      });
      it('$distinct should perform distinct operation', function(done) {
        var db, snapshots;
        snapshots = [
          {
            type: 'json0',
            v: 5,
            m: {},
            data: {
              x: 1,
              y: 1
            }
          }, {
            type: 'json0',
            v: 5,
            m: {},
            data: {
              x: 2,
              y: 2
            }
          }, {
            type: 'json0',
            v: 5,
            m: {},
            data: {
              x: 3,
              y: 2
            }
          }
        ];
        db = this.db;
        return db.writeSnapshot('testcollection', 'test1', snapshots[0], function(err) {
          return db.writeSnapshot('testcollection', 'test2', snapshots[1], function(err) {
            return db.writeSnapshot('testcollection', 'test3', snapshots[2], function(err) {
              var query;
              query = {
                $distinct: true,
                $field: 'y',
                $query: {}
              };
              return db.query('testcollection', query, null, null, function(err, results, extra) {
                if (err) {
                  throw Error(err);
                }
                assert.deepEqual(extra, [1, 2]);
                return done();
              });
            });
          });
        });
      });
      it('$aggregate should perform aggregate command', function(done) {
        var db, snapshots;
        snapshots = [
          {
            type: 'json0',
            v: 5,
            m: {},
            data: {
              x: 1,
              y: 1
            }
          }, {
            type: 'json0',
            v: 5,
            m: {},
            data: {
              x: 2,
              y: 2
            }
          }, {
            type: 'json0',
            v: 5,
            m: {},
            data: {
              x: 3,
              y: 2
            }
          }
        ];
        db = this.db;
        db.allowAggregateQueries = true;
        return db.writeSnapshot('testcollection', 'test1', snapshots[0], function(err) {
          return db.writeSnapshot('testcollection', 'test2', snapshots[1], function(err) {
            return db.writeSnapshot('testcollection', 'test3', snapshots[2], function(err) {
              var query;
              query = {
                $aggregate: [
                  {
                    $group: {
                      _id: '$y',
                      count: {
                        $sum: 1
                      }
                    }
                  }, {
                    $sort: {
                      count: 1
                    }
                  }
                ]
              };
              return db.query('testcollection', query, null, null, function(err, results, extra) {
                if (err) {
                  throw Error(err);
                }
                assert.deepEqual(extra, [
                  {
                    _id: 1,
                    count: 1
                  }, {
                    _id: 2,
                    count: 2
                  }
                ]);
                return done();
              });
            });
          });
        });
      });
      it('does not let you run $aggregate queries without options.allowAggregateQueries', function(done) {
        var query;
        query = {
          $aggregate: [
            {
              $group: {
                _id: '$y',
                count: {
                  $sum: 1
                }
              }
            }, {
              $sort: {
                count: 1
              }
            }
          ]
        };
        return this.db.query('testcollection', query, null, null, function(err, results) {
          assert.ok(err);
          return done();
        });
      });
      it('does not allow $mapReduce queries by default', function(done) {
        var db, snapshots;
        snapshots = [
          {
            type: 'json0',
            v: 5,
            m: {},
            data: {
              player: 'a',
              round: 1,
              score: 5
            }
          }, {
            type: 'json0',
            v: 5,
            m: {},
            data: {
              player: 'a',
              round: 2,
              score: 7
            }
          }, {
            type: 'json0',
            v: 5,
            m: {},
            data: {
              player: 'b',
              round: 1,
              score: 15
            }
          }
        ];
        db = this.db;
        return db.writeSnapshot('testcollection', 'test1', snapshots[0], function(err) {
          return db.writeSnapshot('testcollection', 'test2', snapshots[1], function(err) {
            return db.writeSnapshot('testcollection', 'test3', snapshots[2], function(err) {
              var query;
              query = {
                $mapReduce: true,
                $map: function() {
                  return emit(this.player, this.score);
                },
                $reduce: function(key, values) {
                  return values.reduce(function(t, s) {
                    return t + s;
                  });
                },
                $query: {}
              };
              return db.query('testcollection', query, null, null, function(err, results) {
                assert.ok(err);
                assert.equal(results, null);
                return done();
              });
            });
          });
        });
      });
      return it('$mapReduce queries should work when allowJavaScriptQuery == true', function(done) {
        var db, snapshots;
        snapshots = [
          {
            type: 'json0',
            v: 5,
            m: {},
            data: {
              player: 'a',
              round: 1,
              score: 5
            }
          }, {
            type: 'json0',
            v: 5,
            m: {},
            data: {
              player: 'a',
              round: 2,
              score: 7
            }
          }, {
            type: 'json0',
            v: 5,
            m: {},
            data: {
              player: 'b',
              round: 1,
              score: 15
            }
          }
        ];
        db = this.db;
        db.allowJSQueries = true;
        return db.writeSnapshot('testcollection', 'test1', snapshots[0], function(err) {
          return db.writeSnapshot('testcollection', 'test2', snapshots[1], function(err) {
            return db.writeSnapshot('testcollection', 'test3', snapshots[2], function(err) {
              var query;
              query = {
                $mapReduce: true,
                $map: function() {
                  return emit(this.player, this.score);
                },
                $reduce: function(key, values) {
                  return values.reduce(function(t, s) {
                    return t + s;
                  });
                },
                $query: {}
              };
              return db.query('testcollection', query, null, null, function(err, results, extra) {
                if (err) {
                  throw Error(err);
                }
                assert.deepEqual(extra, [
                  {
                    _id: 'a',
                    value: 12
                  }, {
                    _id: 'b',
                    value: 15
                  }
                ]);
                return done();
              });
            });
          });
        });
      });
    });
    describe('query with projection', function() {
      it('returns only projected fields', function(done) {
        var db;
        db = this.db;
        return db.writeSnapshot('testcollection', 'test', {
          type: 'json0',
          v: 5,
          m: {},
          data: {
            x: 5,
            y: 6
          }
        }, function(err) {
          return db.query('testcollection', {
            x: 5
          }, {
            y: true
          }, null, function(err, results) {
            if (err) {
              throw Error(err);
            }
            assert.deepEqual(results, [
              {
                type: 'json0',
                v: 5,
                data: {
                  y: 6
                },
                docName: 'test'
              }
            ]);
            return done();
          });
        });
      });
      return it('returns no data for matching documents if fields is empty', function(done) {
        var db, snapshot;
        snapshot = {
          type: 'json0',
          v: 5,
          m: {},
          data: {
            x: 5,
            y: 6
          }
        };
        db = this.db;
        return db.writeSnapshot('testcollection', 'test', snapshot, function(err) {
          return db.query('testcollection', {
            x: 5
          }, {}, null, function(err, results) {
            if (err) {
              throw Error(err);
            }
            assert.deepEqual(results, [
              {
                type: 'json0',
                v: 5,
                data: {},
                docName: 'test'
              }
            ]);
            return done();
          });
        });
      });
    });
    return describe('queryPollDoc', function() {
      it('returns false when the document does not exist', function(done) {
        var db;
        db = this.db;
        return db.queryPollDoc('testcollection', 'doesnotexist', {}, null, function(err, result) {
          if (err) {
            throw Error(err);
          }
          assert.equal(result, false);
          return done();
        });
      });
      it('returns true when the document matches', function(done) {
        var db, snapshot;
        snapshot = {
          type: 'json0',
          v: 5,
          m: {},
          data: {
            x: 5,
            y: 6
          }
        };
        db = this.db;
        return db.writeSnapshot('testcollection', 'test', snapshot, function(err) {
          return db.queryPollDoc('testcollection', 'test', {
            x: 5
          }, null, function(err, result) {
            if (err) {
              throw Error(err);
            }
            assert.equal(result, true);
            return done();
          });
        });
      });
      it('returns false when the document does not match', function(done) {
        var db, snapshot;
        snapshot = {
          type: 'json0',
          v: 5,
          m: {},
          data: {
            x: 5,
            y: 6
          }
        };
        db = this.db;
        return db.writeSnapshot('testcollection', 'test', snapshot, function(err) {
          return db.queryPollDoc('testcollection', 'test', {
            x: 6
          }, null, function(err, result) {
            if (err) {
              throw Error(err);
            }
            assert.equal(result, false);
            return done();
          });
        });
      });
      return it('does not allow $where queries', function(done) {
        return this.db.queryPollDoc('testcollection', 'somedoc', {
          $where: "true"
        }, null, function(err) {
          assert.ok(err);
          return done();
        });
      });
    });
  });
  require('livedb/test/snapshotdb')(create);
  return require('livedb/test/oplog')(create);
});
